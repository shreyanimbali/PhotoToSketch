# -*- coding: utf-8 -*-
"""PhotoToSketch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15w5cY3IoWu0DPLj6M-1b0MUdIXBzYYXh
"""

import requests
import os

"""Make a directory and upload image"""

!mkdir -p ./images

if not os.path.isfile("./images/highfive.jpg"):
  rd = requests.get("https://images.app.goo.gl/t8y5DQVJ7ae6nGmdA")
  fl = open("./images/f.jpg", mode = "wb+")
  fl.write(rd.content)
  fl.close()

"""Importing the required libraries & loading image"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

img = cv.imread("./images/highfive.jpg")
plt.imshow(img)

# OpenCV reads the order of the color channels in colored images as BGR

"""Converting the color from BGR to RGB"""

img_rgb = cv.cvtColor(img,cv.COLOR_BGR2RGB)
plt.imshow(img_rgb)

"""To convert image to sketch:

a) Converting image to greyscale

b) Smooting the image

c) Detecting the edges

d) Getting the threshold of the image
"""

# Converting image to Greyscale

img_gray = cv.cvtColor(img_rgb,cv.COLOR_RGB2GRAY)
plt.imshow(img_gray, cmap="gray")

# Smooting th edges of the grayscale image
# smoothing filter is applied to the image to reduce the noise of an image (make it more blurry)
# popluarly used smoothing fileter is Gaussian filter

img_blur = cv.GaussianBlur(img_gray,(5,5),3)
plt.imshow(img_blur,  cmap = "gray")

# to detect edges, computing gradient magnitude
# gradient magnitude = sqrt((dy)^2 + (dx)^2))
# applying Sobel filter to detect change in each direction

sobelx = cv.Sobel(img_blur,cv.CV_64F,1,0,ksize=5)
sobely = cv.Sobel(img_blur,cv.CV_64F,0,1,ksize=5)
grad_sq = np.square(sobelx) + np.square(sobely)
grad = np.sqrt(grad_sq)

plt.imshow(grad, cmap = "gray")

# Reversing the colors in the image such that light and dark are interchanged

grad_rev = 255 - grad
plt.imshow(grad_rev,cmap="gray")

# converting grayscale image to binary (thresholding)

t_value,t_img = cv.threshold(grad_rev,10,255,cv.THRESH_BINARY) #returns a tuple with first element : value of threshold & second element : image
plt.imshow(t_img, cmap="gray")

"""Applying the pencil sketch effect"""

pclskt_gray, pclskt_color  = cv.pencilSketch(img_rgb, sigma_s=60, sigma_r=0.07, shade_factor=0.05) 
plt.imshow(pclskt_color)

"""Applying the watercolor effect"""

water_paint = cv2.stylization(img_rgb, sigma_s=3, sigma_r=3)
plt.imshow(water_paint)